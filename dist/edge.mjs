var a={},w=new TextDecoder;a.show=async function(e){let o=await Deno.run({stdout:"piped",cmd:["wg","show",e]}).output(),s=w.decode(o).split(`

`),t=[],n;return s.forEach(function(i){let d=i.slice(0,i.indexOf(": ")),r={};d=="peer"?(r.type="peer",i.split(`
`).forEach(function(c){let l=c.indexOf(": "),p=c.slice(0,l),u=c.slice(l+2);p=="peer"?r.pub=u:p=="  endpoint"?r.end=u:p=="  allowed ips"&&(r.range=u.replaceAll(" ",""))})):d=="interface"&&(r.type="self",i.split(`
`).forEach(function(c){let l=c.indexOf(": "),p=c.slice(0,l),u=c.slice(l+2);p=="  public key"&&(r.pub=u)}),n=r),d?.length>2&&t.push(r)}),{ifname:e,peers:t,self:n}};a.setPeer=function(e,o,s=30){let t=["wg","set",e,"peer",o.pub,"persistent-keepalive",s.toString()];o.end&&(t.push("endpoint"),t.push(o.end)),o.range&&(t.push("allowed-ips"),t.push(o.range)),Deno.run({cmd:t})};a.delPeer=function(e,o){Deno.run({cmd:["wg","set",e,"peer",o]})};var f=Deno.args[0]||"edge.json";console.info(`Reading configuration from: ${f}`);var g="{}";try{g=await Deno.readTextFile(f)}catch{}var b=JSON.parse(g),h=async function(e){let o=new WebSocket(`${e.registry}/messages`.replace("http","ws"));console.debug(`Connecting to the registry of ${e.network}...`),o.addEventListener("open",async function(){console.debug(`Connected to the registry of ${e.network}.`);let s=await(await fetch(`${e.registry}/get/${e.netreg||e.network}/${e.pubKey}`)).json();s.peers.forEach(t=>{if(t.pub!=e.pubKey){let n={pub:t.pub,range:t.range};if(!t.end){console.debug(`Ignored peer ${t.pub}.`);return}t.type=="self"?(n.end=t.end,console.debug(`Connected to root server ${t.pub}.`)):console.debug(`Accepted peer ${t.pub} for connection.`),a.setPeer(e.network,n,s.heartbeat)}}),setTimeout(()=>{fetch(`${e.registry}/update/${e.netreg||e.network}/${e.pubKey}`,{method:"post"}),console.debug(`Sent peer update message to the registry of ${e.network}.`)},1e4)}),o.addEventListener("message",async function(s){let t=await(await fetch(`${e.registry}/get/${e.netreg||e.network}/${e.pubKey}`)).json();t.peers.forEach(n=>{if(n.pub!=e.pubKey){let i={pub:n.pub,range:n.range};if(n.end)n.type!="self"&&n.pub!=e.pubKey&&(console.debug(`Connected to peer ${n.pub}`),i.end=n.end);else{console.debug(`Ignored peer ${n.pub}.`);return}a.setPeer(e.network,i,t.heartbeat)}})}),o.addEventListener("close",()=>{console.debug(`Connection to the registry of ${e.network} closed.`)}),e.ws=o};b.forEach(h);var y=JSON.stringify({t:"ping",d:"SYN"}),k=setInterval(async function(){b.forEach(e=>{e.ws.readyState==1?e.ws.send(y):console.debug(`Network registry ${e.network} not ready.`)})},2e4);
