var d={},w=new TextDecoder;d.show=async function(e){let n=await Deno.run({stdout:"piped",cmd:["wg","show",e]}).output(),s=w.decode(n).split(`

`),t=[],i;return s.forEach(function(p){let u=p.slice(0,p.indexOf(": ")),o={};u=="peer"?(o.type="peer",p.split(`
`).forEach(function(r){let c=r.indexOf(": "),l=r.slice(0,c),a=r.slice(c+2);l=="peer"?o.pub=a:l=="  endpoint"?o.end=a:l=="  allowed ips"&&(o.range=a.replaceAll(" ",""))})):u=="interface"&&(o.type="self",p.split(`
`).forEach(function(r){let c=r.indexOf(": "),l=r.slice(0,c),a=r.slice(c+2);l=="  public key"&&(o.pub=a)}),i=o),u?.length>2&&t.push(o)}),{ifname:e,peers:t,self:i}};d.setPeer=function(e,n,s=30){let t=["wg","set",e,"peer",n.pub,"persistent-keepalive",s.toString()];n.end&&(t.push("endpoint"),t.push(n.end)),n.range&&(t.push("allowed-ips"),t.push(n.range)),Deno.run({cmd:t})};d.delPeer=function(e,n){Deno.run({cmd:["wg","set",e,"peer",n]})};var f=Deno.args[0]||"edge.json";console.info(`Reading configuration from: ${f}`);var g="{}";try{g=await Deno.readTextFile(f)}catch{}var h=JSON.parse(g),b=async function(e){let n=new WebSocket(`${e.registry}/messages`.replace("http","ws"));console.debug(`Connecting to the registry of ${e.network}...`),n.addEventListener("open",async function(){console.debug(`Connected to the registry of ${e.network}.`);let s=await(await fetch(`${e.registry}/get/${e.netreg||e.network}/${e.pubKey}`)).json();s.peers.forEach(t=>{if(t.pub!=e.pubKey){let i={pub:t.pub,range:t.range};if(!t.end){console.debug(`Ignored peer ${t.pub}.`);return}t.type=="self"?(i.end=t.end,console.debug(`Connected to root server ${t.pub}.`)):console.debug(`Accepted peer ${t.pub} for connection.`),d.setPeer(e.network,i,s.heartbeat)}}),setTimeout(()=>{fetch(`${e.registry}/update/${e.netreg||e.network}/${e.pubKey}`,{method:"post"}),console.debug(`Sent peer update message to the registry of ${e.network}.`)},1e4)}),n.addEventListener("message",s=>{}),n.addEventListener("close",()=>{console.debug(`Connection to the registry of ${e.network} closed.`)}),e.ws=n};h.forEach(b);var y=JSON.stringify({t:"ping",d:"SYN"}),k=setInterval(async function(){h.forEach(e=>{e.ws.send(y)})},2e4);
